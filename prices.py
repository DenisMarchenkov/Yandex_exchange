import math
import time
import logging
import requests
import pandas as pd

from settings import *


class FakeResponse:
    def __init__(self, status_code=200, json_data=None):
        self.status_code = status_code
        self._json = json_data or {"message": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"}
        self.text = "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
        self.headers = {"Retry-After": 7}

    def json(self):
        return self._json


def prepare_offers_data(file_products, file_markup):
    """
    –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–≤—É—Ö —Ñ–∞–π–ª–æ–≤ XLS, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –Ω–∞—Ü–µ–Ω–∫–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è update_prices.

    :param file_products: str - –ü—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É (—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–æ–Ω–∫–∏: '–ê—Ä—Ç–∏–∫—É–ª', 'Price', 'Mark').
    :param file_markup: str - –ü—É—Ç—å –∫–æ –≤—Ç–æ—Ä–æ–º—É —Ñ–∞–π–ª—É (—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–æ–Ω–∫–∏: 'Mark', 'MarkUP').
    :return: list - –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏.
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        logging.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤: %s –∏ %s", file_products, file_markup)
        df_products = pd.read_excel(file_products)
        df_markups = pd.read_excel(file_markup)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_columns_1 = {"–ê—Ä—Ç–∏–∫—É–ª", "Price", "Mark"}
        required_columns_2 = {"Mark", "MarkUP"}

        logging.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö.")
        if not required_columns_1.issubset(df_products.columns) or not required_columns_2.issubset(df_markups.columns):
            logging.error("–û–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤.")
            raise ValueError("–û–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ –ø–æ–ª—é 'Mark'
        logging.info("–û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–æ–ª–±—Ü—É 'Mark'.")
        df = df_products.merge(df_markups, on="Mark", how="left")

        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –≤ MarkUP –µ–¥–∏–Ω–∏—Ü–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å —Ü–µ–Ω—É, –µ—Å–ª–∏ –Ω–∞—Ü–µ–Ω–∫–∏ –Ω–µ—Ç)
        logging.info("–ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ 'MarkUP' –∑–Ω–∞—á–µ–Ω–∏–µ–º 1.8.")
        df["MarkUP"] = df["MarkUP"].fillna(1.8)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
        logging.info("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –Ω–∞—Ü–µ–Ω–∫–∏.")
        df["NewPrice"] = df["Price"] * df["MarkUP"]
        markup_yandex = df_markups[df_markups['Mark'] == 'YANDEX_old_price']['MarkUP'].values[0] # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ü–µ–Ω–∫—É –ø–æ –º–∞—Ä–∫–µ YANDEX_old_price
        df["DiscountPrice"] = df["NewPrice"] * markup_yandex

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤
        logging.info("–§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤.")

        offers = []
        for _, row in df.iterrows():
            offer_id = str(row["–ê—Ä—Ç–∏–∫—É–ª"])
            price = math.ceil(row["NewPrice"])
            discount_base = math.ceil(row["DiscountPrice"])

            logging.info(f"Processing offer: offerId={offer_id}, price={price}, discountBase={discount_base}")

            offers.append({
                "offerId": offer_id,
                "price": price,
                "discountBase": discount_base
            })

        logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return offers

    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: %s", e)
        raise


def prepare_batches(offers, batch_size=300):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–∞—Ä—Ç–∏–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—É.

    :param offers: list - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ [{"offerId": str, "price": int, "discountBase": int}, ...]
    :param batch_size: int - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
    :return: list - –°–ø–∏—Å–æ–∫ JSON-–æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è API.
    """
    batches = []
    for i in range(0, len(offers), batch_size):
        batch = offers[i:i + batch_size]
        batch_json = {
            "offers": [
                {
                    "offerId": offer["offerId"],
                    "price": {
                        "value": offer["price"],
                        "currencyId": "RUR",
                        "discountBase": offer["discountBase"]
                    }
                }
                for offer in batch
            ]
        }
        batches.append(batch_json)
    return batches


def send_request_with_retries(url, headers, body, max_attempts=3):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö.

    :param url: str - URL API.
    :param headers: dict - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.
    :param body: dict - –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞.
    :param max_attempts: int - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫.
    :return: dict | None - –û—Ç–≤–µ—Ç API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    attempt = 0

    while attempt < max_attempts:
        try:
            #response = requests.post(url, headers=headers, json=body)
            response = FakeResponse()

            # ‚úÖ –ï—Å–ª–∏ –≤—Å—ë –æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if response.status_code == 200:
                return response.json()

            # üîÑ –û—à–∏–±–∫–∏ 500-599 ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º
            elif 500 <= response.status_code < 600:
                logging.warning(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ({response.status_code}). –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_attempts}.")
                attempt += 1
                time.sleep(3)

            # ‚è≥ –û—à–∏–±–∫–∞ 429 ‚Äî –∂–¥—ë–º, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å–∫–∞–∑–∞–ª —Å–∫–æ–ª—å–∫–æ
            elif response.status_code == 429:
                retry_after = int(response.headers.get("Retry-After", 10))
                logging.warning(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ñ–¥—ë–º {retry_after} —Å–µ–∫.")
                time.sleep(retry_after)
                attempt += 1

            # üö´ –û—à–∏–±–∫–∏ 400-499 (–∫—Ä–æ–º–µ 429) ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            else:
                logging.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return None

        except requests.exceptions.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ ({e}). –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_attempts}.")
            attempt += 1
            time.sleep(3)

    return None  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å


def update_prices(api_token, business_id, offers):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –Ø–Ω–¥–µ–∫—Å–∞ –ø–∞—Ä—Ç–∏—è–º–∏.

    :param api_token: str - API –∫–ª—é—á.
    :param business_id: int - ID –±–∏–∑–Ω–µ—Å–∞.
    :param offers: list - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.
    :return: list - –û—Ç–≤–µ—Ç—ã API –ø–æ –ø–∞—Ä—Ç–∏—è–º.
    """
    url = f"https://api.partner.market.yandex.ru/businesses/{business_id}/offer-prices/updates"
    headers = {
        'Api-Key': api_token,
        'Accept': 'application/json',
        'X-Market-Integration': 'OrderGuardTest'
    }

    responses = []
    batches = prepare_batches(offers)

    logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è {len(offers)} —Ç–æ–≤–∞—Ä–æ–≤ ({len(batches)} –ø–∞—Ä—Ç–∏–π).")

    for idx, batch in enumerate(batches, start=1):
        response = send_request_with_retries(url, headers, batch)

        if response:
            logging.info(f"–ü–∞—Ä—Ç–∏—è {idx}/{len(batches)} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏ {idx}/{len(batches)}.")

        responses.append(response)
        time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    return responses



def start_exchange_price():
    offers = prepare_offers_data(OFFERS_FILE, MARKUP_FILE)
    update_prices(API_TOKEN, BUSINESS_ID, offers)


if __name__ == "__main__":
    start_exchange_price()
