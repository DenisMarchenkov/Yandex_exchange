import logging
import time
import requests
import pandas as pd

from settings import *


class FakeResponse:
    def __init__(self, status_code=200, json_data=None):
        self.status_code = status_code
        self._json = json_data or {"message": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"}
        self.text = "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
        self.headers = {"Retry-After": 7}

    def json(self):
        return self._json



def prepare_offers_data(file_products):
    """
    –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ XLS, –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è update_prices.

    :param file_products: str - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É (—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–æ–Ω–∫–∏: '–ê—Ä—Ç–∏–∫—É–ª', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ').
    :return: list - –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        logging.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞: %s", file_products)
        df_products = pd.read_excel(file_products)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_columns = {"–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"}
        if not required_columns.issubset(df_products.columns):
            logging.error("–§–∞–π–ª %s –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤.", file_products)
            raise ValueError(f"–§–∞–π–ª {file_products} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")

        df_products['–ê—Ä—Ç–∏–∫—É–ª'] = df_products['–ê—Ä—Ç–∏–∫—É–ª'].astype(str)
        df_products['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = df_products['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].fillna(0).astype(int)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤
        logging.info("–§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤.")
        offers = []

        for _, row in df_products.iterrows():
            offer_id = row["–ê—Ä—Ç–∏–∫—É–ª"]
            count = row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]

            logging.info("–¢–æ–≤–∞—Ä: –ê—Ä—Ç–∏–∫—É–ª=%s, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=%d", offer_id, count)

            offers.append({
                "offerId": offer_id,
                "qua": count,
            })

        logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return offers

    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: %s", e)
        raise



def prepare_batches(offers, batch_size=300):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–∞—Ä—Ç–∏–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—É.

    :param offers: list - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ [{"offerId": str, "qua": int}, ...]
    :param batch_size: int - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
    :return: list - –°–ø–∏—Å–æ–∫ JSON-–æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è API.
    """
    batches = []
    for i in range(0, len(offers), batch_size):
        batch = offers[i:i + batch_size]
        batch_json = {
            "skus": [
                {
                    "sku": offer["offerId"],  # –ó–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
                    "items": [
                        {
                            "count": offer["qua"],  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
                            #"updatedAt": "2022-12-29T18:02:01Z" # –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ –≤ —è–Ω–¥–µ–∫—Å–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                        }
                    ]
                }
                for offer in batch  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ "skus"
            ]
        }
        batches.append(batch_json)

    return batches


def send_request_with_retries(url, headers, body, max_attempts=3):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö.

    :param url: str - URL API.
    :param headers: dict - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.
    :param body: dict - –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞.
    :param max_attempts: int - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫.
    :return: dict | None - –û—Ç–≤–µ—Ç API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    attempt = 0

    while attempt < max_attempts:
        try:
            #response = requests.put(url, headers=headers, json=body)
            response = FakeResponse()

            # ‚úÖ –ï—Å–ª–∏ –≤—Å—ë –æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if response.status_code == 200:
                return response.json()

            # üîÑ –û—à–∏–±–∫–∏ 500-599 ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º
            elif 500 <= response.status_code < 600:
                logging.warning(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ({response.status_code} - {response.text}). –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_attempts}.")
                print()
                attempt += 1
                time.sleep(3)

            # ‚è≥ –û—à–∏–±–∫–∞ 429 ‚Äî –∂–¥—ë–º, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å–∫–∞–∑–∞–ª —Å–∫–æ–ª—å–∫–æ
            elif response.status_code == 429:
                retry_after = int(response.headers.get("Retry-After", 10))
                logging.warning(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ñ–¥—ë–º {retry_after} —Å–µ–∫.")
                time.sleep(retry_after)
                attempt += 1

            # üö´ –û—à–∏–±–∫–∏ 400-499 (–∫—Ä–æ–º–µ 429) ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            else:
                logging.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return None

        except requests.exceptions.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ ({e}). –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_attempts}.")
            attempt += 1
            time.sleep(3)

    return None  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å



def update_stocks(api_token, campaign_id, offers):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –Ø–Ω–¥–µ–∫—Å–∞ –ø–∞—Ä—Ç–∏—è–º–∏.

    :param campaign_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–º–ø–∞–Ω–∏–∏ –≤ API –∏ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ. –ö–∞–∂–¥–∞—è –∫–∞–º–ø–∞–Ω–∏—è –≤ API —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∞–≥–∞–∑–∏–Ω—É –≤ –∫–∞–±–∏–Ω–µ—Ç–µ.
    :param api_token: str - API –∫–ª—é—á.
    :param offers: list - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.
    :return: list - –û—Ç–≤–µ—Ç—ã API –ø–æ –ø–∞—Ä—Ç–∏—è–º.
    """

    url = f"https://api.partner.market.yandex.ru/campaigns/{campaign_id}/offers/stocks"
    headers = {
        'Api-Key': api_token,
        'Accept': 'application/json',
        'X-Market-Integration': 'OrderGuardTest'
    }

    responses = []
    batches = prepare_batches(offers)

    logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è {len(offers)} —Ç–æ–≤–∞—Ä–æ–≤ ({len(batches)} –ø–∞—Ä—Ç–∏–π).")

    for idx, batch in enumerate(batches, start=1):
        response = send_request_with_retries(url, headers, batch)

        if response:
            logging.info(f"–ü–∞—Ä—Ç–∏—è {idx}/{len(batches)} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏ {idx}/{len(batches)}.")

        responses.append(response)
        time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    return responses



def start_exchange_stock():
    offers = prepare_offers_data(OFFERS_FILE)
    update_stocks(API_TOKEN, CAMPAIGN_ID, offers)


if __name__ == "__main__":
    start_exchange_stock()